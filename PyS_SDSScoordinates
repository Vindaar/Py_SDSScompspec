#!/usr/bin/env python

# This program creates a skymap using the Healpix Python implementation HealPy.
# It creates a coordinate pixel object for each pixel of the skymap
# First, all FITS files of the input list file are opened, their coordinates
# read and they are sorted and associated with the correct HealPix pixel.
# After that SDSScompspec is called for each of the pixels. The resulting 
# Compspec object is returned. 
# A mean opacity is calculated for each pixel and saved in an output FITS file
# containing a HealPix map, which can then be plotted using
# PyS_SDSS-plot_map

import PyS_SDSScompspec #main as SDSScompspec
import PyS_SDSScompspec_multicore #main as SDSScompspec_multicore
from SDSSclasses import *
from SDSSmodules import check_filetype, args_check

# contains astropy coordinate objects used to work with coordinates
from astropy.coordinates import SkyCoord
from astropy import units as u
from astropy.io import fits
import numpy as np

# contains function to call date and time
from datetime import datetime


class coordinate_pixel:
    def __init__(self, pixel_index, nside):
        # Coordinates 
        # self.l_min        = 0
        # self.l_max        = 0
        # self.b_min        = 0
        # self.b_max        = 0
        # TODO: think about adding explicit coordinate in l and b to each object?
        self.b, self.l    = hp.pix2ang(nside, pixel_index)
        self.b_sec        = 0
        self.l_sec        = 0
        self.spectra_list = []
        self.tau          = 0
        self.tau_error    = 0
        self.num_contr    = 0   # number of contributing sightlines to tau
        
def create_coord_map(settings):
    # Creates a list of coordinate_square elements based on given boundaries and size of 
    # each coordinate square.
    print "Start creation of coordinate map: "

    spectra_map = np.arange((settings.map_npix), dtype=object)
    # Create coordinate pixel for each element in map. Do in more pythonic way?
    for i in xrange(settings.map_npix):
        spectra_map[i]   = coordinate_pixel(i, settings.map_nside)

    # Using HEALpy, we don't need a specific coord_map, since the coordinates
    # are only stored implicitly
    # TODO: think of more pythonic way to do this..
    # for i in xrange(len(l)):
    #     for j in xrange(len(b)):
    #         coord_map[i,j] = ((l[i], b[j]))
    #         if (i*len(l) + j)%100 == 0 and i:
    #             print (i*len(l) + j), " elements done"
    #         # temporary element of spectra_map for convenience
    #         spec_element = coordinate_square()
    #         spec_element.l_min = coord_map[i,j][0]
    #         spec_element.b_min = coord_map[i,j][1]
    #         spec_element.l_max = spec_element.l_min + delta_l
    #         spec_element.b_max = spec_element.b_min + delta_b
    #         spectra_map[i,j] = spec_element

    return spectra_map

def read_inputfiles_and_sort_by_coords(settings, spectra_map):

    # receives the input file containing FITS files, opens them and reads
    # coordinates. Then it sorts all spectra and assigns them to the 
    # correct coordinate_square.

    print "Start reading coordinates from FITS files."

    files = list(settings.inputfile)
    data_type = [('filename', 'S100'), ('l_deg', float), ('b_deg', float)]
    spectra_tuple = np.ndarray((len(files)), dtype = data_type)
    
    for i, file in enumerate(files):
        file = file.rstrip()
        filetype = check_filetype(file)
        hdu = fits.open(file)
        hdu0header = hdu[0].header

        if filetype == 2:
            ra = hdu0header['PLUG_RA']
            dec = hdu0header['PLUG_DEC']
        if filetype == 1:
            ra = hdu0header['RAOBJ']
            dec = hdu0header['DECOBJ']
        coordinates = SkyCoord(ra = ra*u.degree, dec = dec*u.degree, frame='fk5')
#        print coordinates.ra.degree, coordinates.dec.degree
#        print coordinates.galactic.l.degree, coordinates.galactic.b.degree
#        print "rad:"
#        print coordinates.ra.radian, coordinates.dec.radian
#        print coordinates.galactic.l.radian, coordinates.galactic.b.radian
        entry = (file, float(coordinates.galactic.l.radian), float(coordinates.galactic.b.radian + np.pi/2.0))
        spectra_tuple[i] = entry
        if i % 100 == 0:
            print i, " coordinates read."
        hdu.close()

    spectra_tuple = np.sort(spectra_tuple, order=['l_deg','b_deg'])

    # TODO: think of more pythonic way to do this
    for i in xrange(len(spectra_tuple)):
        # temp_index_l = int(spectra_tuple[i][1] / settings.delta_l)
        # temp_index_b = int( (spectra_tuple[i][2] + 90) / settings.delta_b)
        # spectra_map[temp_index_l, temp_index_b].spectra_list.append(spectra_tuple[i][0])
        # Instead of two indices, we immediately get the one index for the pixel
        # on the HEALpix map by using the HEALpy function ang2pix()
        # l = longitude = phi element of [0, 2pi]
        # b = latitude  = theta element of [0, pi]
        # maybe have to add pi/2 to b, since it might be given from -pi/2 to pi/2
        # Yes. Done in spectra_tuple
        pixel_index = hp.ang2pix(settings.map_nside, spectra_tuple[i][2], spectra_tuple[i][1])
#        print spectra_tuple[i][1], spectra_tuple[i][2], hp.pix2ang(settings.map_nside, pixel_index)
        spectra_map[pixel_index].spectra_list.append(spectra_tuple[i][0])
        coord = SkyCoord(l = spectra_tuple[i][1]*u.radian, b = (spectra_tuple[i][2] - np.pi/2.0)*u.radian, frame='galactic')
        spectra_map[pixel_index].l_sec = coord.galactic.l.degree
        spectra_map[pixel_index].b_sec = coord.galactic.b.degree

    return spectra_map


def build_coordinate_fits_file(compspectra, spectra_map, settings):

# Build the actual FITS output file
    # set a few variables
    i = 0
    coeff1 = 0.0001

    # TODO: For now we only take nhist from the fist comp_spectrum into account
    # think about if we actually need that value
    while compspectra[0].nhist == 0:
        i += 1
    sidx = i
    npix = 0
    date_time = datetime.now()

    hdu0_l         = np.zeros(spectra_map.size)
    hdu0_b         = np.zeros(spectra_map.size)
    hdu0_l_sec     = np.zeros(spectra_map.size)
    hdu0_b_sec     = np.zeros(spectra_map.size)
    hdu0_tau       = np.zeros(spectra_map.size)
    hdu0_tau_error = np.zeros(spectra_map.size)
    hdu0_num_contr = np.zeros(spectra_map.size)
    
    # for i in xrange(sidx, 3000):
    #     if compspectra.nhist[i] > 0:
    #         npix = i+1

# HDU1: Image array. in principle just the spectra map overlaid with tau_array.
# TODO: add tau value to coordinate_square object, so that we can work on spectra_map?
# HDU2: individual information about compspectra output?


# HDU1: l, b, tau, tau_error, # contributing, 
# give l, b as center of square

# Calculate some statistics
    
    

# calculate total number of sightlines
# sum over all compspectra spectra_counts
    spectra_count = reduce(lambda nspec, cspec_count: nspec + cspec_count, map(lambda cspec: cspec.spectra_count, compspectra))

    # Add a few header keys
    prihdr = fits.Header()
    prihdr['PROGRAM'] = settings.program_name
    prihdr['AUTHOR']  = ('Sebastian Schmidt')
    prihdr['DATE']    = (date_time.strftime("%A, %d. %B %Y %I:%M%p"), 'Date created')
    prihdr['ARRAY0']  = ('l', 'Latitude of coordinate square')
    prihdr['ARRAY1']  = ('b', 'Longitude of coordinate square')
    prihdr['ARRAY2']  = ('TAU', 'averaged optical depth')
    prihdr['ARRAY3']  = ('ETAU', 'error of averaged optical depth')
    prihdr['ARRAY4']  = ('NCONTR', 'number of contributing QSOs to sightline')
    prihdr['NSPECTRA']= (spectra_count, 'Total number of contributing QSOs')
#    prihdr['NSPEC']   = (len(spec), 'Total number of contributing QSOs')
    prihdr['VACUUM']  = (1, 'Wavelengths are in vacuum')
    prihdr['DC_FLAG'] = (1, 'Log-Linear Flag')
    prihdr['CRPIX1']  = (1, 'Starting pixel (1-indexed)')
    # currently use values of first object. Will be changed later -> moved to HDU3 where
    # information about diffeernt compspectra will be stored
    prihdr['COEFF0']  = np.log10(compspectra[0].wave[sidx])
    prihdr['COEFF1']  = coeff1
    prihdr['CRVAL1']  = np.log10(compspectra[0].wave[sidx])
    prihdr['CD1_1']   = coeff1
    prihdr['DR']      = (10, 'SDSS Data release used')


    # We reshape the whole spectra_map so that it is easier to work with. Don't use it afterwards
    # anymore, so we don't need the matrix form of it
    spectra_map = spectra_map.reshape(spectra_map.size)

    # # create the Primary ouput HDU and print it to file
    hdu = fits.PrimaryHDU(header=prihdr)

    # run over all pixels and append elements to new arrays
    for i in xrange(len(spectra_map)):
        hdu0_l[i]         = spectra_map[i].l
        hdu0_b[i]         = spectra_map[i].b
        hdu0_l_sec[i]     = spectra_map[i].l_sec
        hdu0_b_sec[i]     = spectra_map[i].b_sec
        print hdu0_l[i], hdu0_b[i], i
        hdu0_tau[i]       = spectra_map[i].tau
        hdu0_tau_error[i] = spectra_map[i].tau_error
        hdu0_num_contr[i] = spectra_map[i].num_contr

    # write arrays to Table HDU:
    TableHDU = fits.BinTableHDU.from_columns(
        fits.ColDefs([fits.Column(name='l',           format='D', array=hdu0_l),
                      fits.Column(name='b',           format='D', array=hdu0_b),
                      fits.Column(name='l_sec',       format='D', array=hdu0_l_sec),
                      fits.Column(name='b_sec',       format='D', array=hdu0_b_sec),
                      fits.Column(name='Tau',         format='D', array=hdu0_tau),
                      fits.Column(name='ETau',        format='D', array=hdu0_tau_error),
                      fits.Column(name='NumContr',    format='D', array=hdu0_num_contr)]))


    # # Create 2nd HDU containing information on all QSOs
    # # Calculate arrays, which will fill the table HDU
    # mjd_array         = map(lambda spec: spec.MJD, spec)
    # plate_array       = map(lambda spec: spec.plateid, spec)
    # fiber_array       = map(lambda spec: spec.fiberid, spec) 
    # alpha_array       = map(lambda spec: spec.alpha, spec)
    # alpha_error_array = map(lambda spec: spec.alpha_error, spec)
    # ra_array          = map(lambda spec: spec.coordinates.ra.deg, spec)
    # dec_array         = map(lambda spec: spec.coordinates.dec.deg, spec)
    # l_array           = map(lambda spec: spec.coordinates.galactic.l.deg, spec)
    # b_array           = map(lambda spec: spec.coordinates.galactic.b.deg, spec)
    # zem_array         = map(lambda spec: spec.z, spec)
    # smag_array        = map(lambda spec: spec.smag, spec)
    # #flag_array 

    # # write arrays to Table HDU:
    # TableHDU = fits.new_table(
    #     fits.ColDefs([fits.Column(name='MJD',    format='D', array=mjd_array),
    #                   fits.Column(name='PLATE',  format='D', array=plate_array),
    #                   fits.Column(name='FIBER',  format='D', array=fiber_array),
    #                   fits.Column(name='RA',     format='D', array=ra_array),
    #                   fits.Column(name='DEC',    format='D', array=dec_array),
    #                   fits.Column(name='ALPHA',  format='D', array=alpha_array),
    #                   fits.Column(name='EALPHA', format='D', array=alpha_error_array),
    #                   fits.Column(name='l',      format='D', array=l_array),
    #                   fits.Column(name='b',      format='D', array=b_array),
    #                   fits.Column(name='ZEM',    format='D', array=zem_array),
    #                   fits.Column(name='MAGSPEC',format='PD()', array=smag_array)]))
    #  #                 fits.Column(name='FLAG',   format='E', array=flag_array)]))
    # # TODO: check if I can change smag column a little bit


    # # Now write new keywords to Table header
    table_header = TableHDU.header
    table_header['NSIDE']  = (settings.map_nside, 'Nside of sky map')
    # table_header['NSPEC']  = (len(spec), 'Total number of Quasars')
    # table_header['MEAN_A'] = (compspectra.mean_a, 'Mean spectral index')
    # table_header['SIGMA_A']= (compspectra.sigma_a, 'Standard deviation on alpha')
    # table_header['MED_A']  = (compspectra.median_a, 'Median spectral index')
    # table_header['SIQR_A'] = (compspectra.siqr_a, '68% semi-interquartile range on alpha')

    hdulist = fits.HDUList([hdu, TableHDU])
    # write to outfile and 'clobber=True' -> overwrite if existing
    outfile = settings.outfile_basis + '.fits'
    hdulist.writeto(outfile, clobber=True)

def main(args):

    # Boundaries
    # l: 0, 360 degrees
    # b: -90 to +90 degrees

    settings = program_settings()
    settings.program_name = 'SDSScoordinates'
    args_check(args, settings)
    # TODO: just a short fix for change in nside not affecting map_npix in settings, because it's determined on creation of object
    if settings.map_npix == 0:
        settings.map_npix = hp.nside2npix(settings.map_nside)
    print settings.inputfile

    #TODO: --coords flag not all that necessary, since we can just create a settings object
    # in here and pass that to the main file. Then we also don't need the output file etc.
    # TODO: provide possibility to only work on specific piece of the sky
        # unecessary now. We only use whole map for now.
                
    # We create the spectra_map. At this point contains only location of squares and no spectra.
    # will be filled by calling read_inputfiles_and_sort_by_coords()
    # we could set boundaries on the considered coordinates here.
    # Now, only 
    spectra_map = create_coord_map(settings)
    spectra_map = read_inputfiles_and_sort_by_coords(settings, spectra_map)

    # Set settings flags for the call of SDSScompspec later
    # If cspec == 0, SDSScompspec outputs the same FITS file as usually, when run alone
    settings.cspec  = 1
    settings.coords = 1
    # create enough comp_spectra for all calls of SDSScompspec
    # TODO: might change such that we only create as many, as spectra_map has elements with
    # spetra_list != 0
    compspectra     = np.array([comp_spectrum(5673) for i in xrange(spectra_map.size)])

    # Ask for an output file name
    settings.outfile_basis = raw_input('Give the name of the output FITS files: ')

    # By running over all elements of spectra_map, we also run over all squares on the
    # galactic coordinate map
    for i in xrange(len(spectra_map)):
#        for j in xrange(spectra_map.size / len(spectra_map)):
            # Maybe unecessary to set settings coordinates, since we don't use them 
            # anymore in SDSScompspec
            # settings.l_min = spectra_map[i,j].l_min
            # settings.l_max = spectra_map[i,j].l_max
            # settings.b_min = spectra_map[i,j].b_min
            # settings.b_max = spectra_map[i,j].b_max
            # Only make a call to SDSScompspec, if there are any spectra at the 
            # considered coordinate
        if spectra_map[i].spectra_list:
            settings.spectra_list = spectra_map[i].spectra_list
            # Name by pixel index for now
            settings.outfile = settings.outfile_basis + '_' + str(i)
            print "Working on outfile: ", settings.outfile
            print "Contains #", len(spectra_map[i].spectra_list), "spectra"

                # call SDSScompspec and save the returned comp_spectrum into the array
            compspectra[i] = PyS_SDSScompspec.main(args, settings)
                # actual calculations of the opacity.
                # NOTE: calculation not correct yet, unsure how to do it properly.
            spectra_map[i].num_contr     = compspectra[i].spectra_count
            if spectra_map[i].num_contr:
                
                # TODO: still WIP
                spectra_map[i].tau       = (sum(compspectra[i].flux))/(np.size(np.nonzero(compspectra[i].flux)))


#                spectra_map[i].tau       = (sum(compspectra[i].flux))# / spectra_map[i].num_contr)
                spectra_map[i].tau_error = (sum(compspectra[i].flux_error))# / spectra_map[i].num_contr)
            else:
                spectra_map[i].tau       = 0
                spectra_map[i].tau_error = 0
            print "tau and error: ", spectra_map[i].tau, spectra_map[i].tau_error

    build_coordinate_fits_file(compspectra, spectra_map, settings)


if __name__ == "__main__":
    import sys
    main(sys.argv[1:])
